[["index.html", "R Course Chapter 1 Analysis of Drug like Molecule using ChemmineR 1.1 Objectives 1.2 Outcome 1.3 Informatics 1.4 The ChemmineR tool", " R Course YOUR NAME HERE 2024-08-11 Chapter 1 Analysis of Drug like Molecule using ChemmineR 1.1 Objectives The objectives of this project is to; predict the physicochemical/structural properties, structural similarity searching, classification and clustering of drug like molecular library. to visualize the functions for compound clustering results and chemical structures. 1.2 Outcome Learner will able to analyze the drug-like small molecule in R 1.3 Informatics Informatics refers to the study, design and application of computer and information systems to solve problems and improve processes in various domains. These are some of the aspects covered in informatics; Health informatics Bioinformatics Data Informatics Clinical informatics Cheminformatics Social informatics Business informatics This course will focus exclusively on Bioinformatics and Chemoinformatics. 1.3.1 Bioinformatics It is the information technology designed to generate and access biological data and derive information from it. 1.3.2 Chemoinformatics It is the information technology used to design molecular libraries that interact with the identified targets NOTE: Bioinformatics and chemoinformatics are generic terms that encompass the design, creation, organization, management, retrieval, analysis, identification, visualization and use of chemical and biological information. In this course,it will be used to manage information such as; Chemical properties Chemical synthesis Biological effects According to Jurgen B, 2004 defines Cheminformatics as the focus ion the information resources needed to optimize of the properties of a ligand to become a drug. It is derived from Chem-, chemi- or chemo-informatics Chemical Informatics is the application of information technology to chemistry(not with a specific focus on drug discovery). Frank Brown, 1998 defines Cheminformatics as the mixing of information resources to transform data into information and information into knowledge, for the intended purpose of making decisions faster in the arena of drug lead identification and optimization. 1.3.3 Application of Chemoinformatics in the Drug Industry The computer is used to analyze the interactions between the drug and the receptor site and design molecules with an optimal fit. Once targets are developed are developed, libraries of compounds are screened for activity with one or more relevant assays using High Throughput Screening. HITS (High Throughput Screening) The Biochemical target is identified and many compounds are tested on it. The compound with desired effect on the target are selected by HITS. HITS is directly used as chemical probe to study the target and it provides the structure for chemists to begin developing a drug or other product. Hits are then evaluated for binding, potency, selectivity, and functional activity. The researchers then seek to improve the potency of the drug such as; Absorption Distribution Metabolism Excretion Toxicity The potential drug candidates should be in line with Lipinski’s Rule of 5, according to Lipinski et al, 1997. These are; Have 5 or fewer H-bond(Hydrogen bond) donors (expressed as the sum of OHs and NHs) Have a MW less than 500 LogP less than 5 Have 10 or less H-bond acceptors (expressed as the sum of Ns and Os) Have a number of rotatable bond less than 10 1.3.3.1 Small Molecule A small molecule is a low molecular weight organic compound which is by definition not a polymer. In pharmacology, ‘small molecule’ is usually restricted to a molecule that also binds with high affinity to a biopolymer such as protein, nucleic acid, or polysaccharide and in addition alters the activity or function of biopolymer 1.3.4 Chemical databases There are many chemical databases, here are some of them; Drugbank Pubchem Zinc 1.3.4.1 The Drug Bank The drug Bank database is a comprehensive freely accessible, online database containing information on drugs and drug targets created and maintained by the University of Alberta and The Metabolomics Innovation Centre located in Alberta, Canada in 2006. The homepage of this online database can be accessed anywhere by the link below https://www.drugbank.ca/ The homepage will show up as below The information includes the drug chemical structures, mechanisms of action, interactions, and pharmacological data. In this course, we will analyze the Amoxicillin drug which is a small molecule using the Drug Bank. Follow the steps below; Visit the Drug Bank homepage at https://www.drugbank.ca/. The homepage will show up. Click at the search bar on top of the page and type \"Amoxicillin\" and enter to search. The search results for Amoxicillin will probably show up as t below Scroll down to the structure section to view its chemical structure. It will show up as Amoxicillin is a broad-spectrum antibiotic used to treat various bacterial infections. Its molecular formula is C16H19N3O5S with a molecular weight of 365.4 g/mol. Amoxicillin inhibits bacterial cell wall synthesis, leading to bacterial cell death. It is effective against a range of Gram-positive and Gram-negative bacteria. Amoxicillin is well-absorbed orally and is stable in gastric acid. It is primarily excreted unchanged in the urine. Common side effects include gastrointestinal issues and skin rash, with severe allergic reactions being rare but possible. Amoxicillin can interact with drugs like methotrexate and oral contraceptives. There is more information, this is just but a summary. For more information visit the DrugBank entry for Amoxicillin 1.3.4.2 The PubChem PubChem is the world’s largest collection of freely accessible chemical information. The chemicals are searched by their name, molecular formula, structure, and other identifiers. Find chemical and physical properties, biological activities, safety and toxicity information, patents, literature citations and more. This website is maintained by the National Center for Biotechnology Information (NCBI) and includes information on chemical compounds, substances and bioassays. Bioassay is a scientific method that measures the effect of a substance on living organisms, such as plants, cells, or tissues. In this course, we will use the PubChem website to analyze the Aspirin drug. For effective analysis, the following steps will be followed; Visit the PubChem website at https://pubchem.ncbi.nlm.nih.gov/. The homepage below will show up. Click the search bar at the center, type \"Aspirin\" then press “enter”. There will be numerous entries from the search results as shown below The website provides the best matches but select the most preferred result that fits your reseacrh needs. In this case we will go with the best match, Aspirin(CID 2244). The PubChem website will provide the details of the Aspirin drug as; . Aspirin (acetylsalicylic acid) is a widely used medication for pain relief, fever reduction, and anti-inflammatory purposes. It has a molecular formula of C9H8O4 and a molecular weight of 180.16 g/mol. Aspirin works by inhibiting cyclooxygenase enzymes, reducing the production of prostaglandins and thromboxanes, which alleviates pain and inflammation. Aspirin is rapidly absorbed from the gastrointestinal tract and widely distributed in body tissues. It is metabolized in the liver and excreted primarily through the kidneys. Common side effects include gastrointestinal irritation and increased risk of bleeding. Aspirin can interact with various drugs, including anticoagulants and other NSAIDs. This is just but a summary from the PuChem entry for Aspirin, for more detailed information visit https://pubchem.ncbi.nlm.nih.gov/compound/2244 1.3.4.3 The ZINC Interface It is a free database of commercially-available compounds for virtually screening and contains over 230 millions purchasable compounds in ready-to-dock, 3D formats. ZINC also contains over 750 million purchasable compounds. It is provided by Irwin and Shoichet Laboratories in the Department of Pharmaceutical Chemistry at the University of California San Francisco (UCSF). This is curated collected of commercially available chemical compounds prepared especially for virtual screening. The database contains over 37 million enumerated searchable, commercially available compounds in 2D, over 4.5 billion of which have been built in biologically relevant ready-to-dock 3D formats. The database can be searched online using whole-molecule similarity, substructure, and patterns in 2D The guide below will demonstrate how to analyze the Ibuprofen drug using the ZINC interface step by step. Any other drug can be analyzed using the same technique. Visit the ZINC database website at http://zinc.docking.org/ using web browser of your choice. The ZINC homepage will show as below. Navigate tp the \"substances\" tab on top of the page. The page below ill appear. Click on the search bar on top-left corner of the page, type \"Ibuprofen\" and press enter to search. More than one type of Ibuprofen will show up. In this case, we are interested on ZINC2647(Ibuprofen) which will probably appear on the top. Click it to show the details. The details of Ibuprofen will display as; Here’s an example summary of what you might find: Ibuprofen is a nonsteroidal anti-inflammatory drug (NSAID) used for pain relief, fever reduction, and anti-inflammatory purposes. It has a molecular formula of C13H18O2 and a molecular weight of 206.28 g/mol. Ibuprofen inhibits cyclooxygenase enzymes (COX-1 and COX-2), leading to decreased production of prostaglandins and reducing inflammation and pain. Ibuprofen is rapidly absorbed from the gastrointestinal tract and widely distributed throughout the body. It is metabolized in the liver and excreted primarily through the kidneys. Common side effects include gastrointestinal irritation and an increased risk of bleeding, especially with prolonged use. For further information visit https://zinc.docking.org/substances/ZINC000000002647/ 1.4 The ChemmineR tool ChemmineR is a chemoinformatics package for analyzing drug-like small molecule data in R . In addition, ChemmineR offers visualization functions for compounds clustering results and chemical structures. The integration of chemoinformatics tools with the R programming environment has many advantages, such as easy access to a wide spectrum of statistical methods, machine learning algorithms and graphic utilities. ChemmineR is exclussively used for analyzing and clustering small molecules by structural similarities, physicochemical properties or custom data types. There are two ways to analyze a drug-like molecule using ChemmineR, they are: Web interface ChemmineR library under the Bioconductor package. 1.4.1 Overview of Chemmine web tool Chemmine Web Tools is an online service for analyzing and clustering small molecules by structural similarities, physicochemical properties or custom data types. Compounds can be imported into the workbench by drawing structures in the web browser, copy and paste, from local files, or from a PubChem search which includes an online molecular editor. The steps below provide a guide on how to analyze the Paracetamol drug using the web interface. Download an SDF file for the drug of your choice. In this case the Paracetamol drug file is downloaded from https://www.ebi.ac.uk/chebi/searchId.do?chebiId=CHEBI:46195 Visit http://chemmine.ucr.edu/ to access the ChemmineR homepage. On the side bar, there is a tab titled, “WORKBENCH”. Click the “Add compounds” hyperlink. Click on the “SDF Upload” and click on the “CHOOSE FILE” button to upload the paracetamol SDF file from the local storage that was previously downloaded. The paracetamol.sdf has uploaded now click on “Show Structures” on the center of the page below The chemical structure of paracetamol will show up along with other details like; "],["bioconductor-package.html", "Chapter 2 Bioconductor Package 2.1 Overview of the BioConductor package 2.2 Installation of BioConductor package 2.3 Importing Data in R 2.4 Writing Script of Code in R 2.5 Data Interface 2.6 Introduction to Bioconductor", " Chapter 2 Bioconductor Package 2.1 Overview of the BioConductor package 2.2 Installation of BioConductor package To install BioConductor run the below command if (!requireNamespace(&quot;BiocManager&quot;, quitely=TRUE)) install.packages(&quot;BiocManager&quot;) BiocManager::install(&quot;ChemmineR&quot;) 2.3 Importing Data in R Depending on the type of data file, R has a varying methods to load the data. The below list shows how to load different types of files to the R program. data &lt;- read_csv(\"path/to/your/file.csv\") for csv file data &lt;- read_excel(\"path/to/your/file.xlsx\", sheet = \"Sheet1\") for excel file data &lt;- fread(\"path/to/your/file.csv\") for large csv files. data &lt;- read_sav(\"path/to/your/file.sav\") for SPSS files. data &lt;- read_dta(\"path/to/your/file.dta\") for stata files. data &lt;- read_sas(\"path/to/your/file.sas7bdat\") for SAS files. 2.4 Writing Script of Code in R In R, the use can interact directly with the console or prepare a script inform of *.R or *.Rmd (R Markdown) files. Script are useful as they allow one to; easily pick up where they left off on a project and progressively build and refine code and analysis. easily reproduce analysis run earlier and documentation. This also saves time on repetetive tasks. do a batch processing such that tasks are automotated instead of running them one by one. debug the code and find errors line by line. version control such as git that tracks the changes and enables collaboration with other developers. A script is a set of commands that usually includes commenting on what each piece of code intended to do 2.5 Data Interface Follow the following steps when working with data from external interfaces; Refer CSV working file(filepath) e.g test.csv Get the current working directory, getwd() Set the current working directory setwd(). 2.5.1 Reading the *.csv file In this section, we will work with two csv files, test.csv and data.csv. Both files are stored in a directory named data. Lets load the data.csv to the program. person_info &lt;- read.csv(&quot;data/data.csv&quot;) The read.csv() function automatically converts the loaded to a data frame. is.data.frame() is used to find if a variable is a data frame # just to confirm if the said data is a data frame print(is.data.frame(person_info)) ## [1] TRUE The person_info data set is confirmed to be a variable. The ncol() function counts the number of columns/variables/features in a data frame print(ncol(person_info)) # count the number of columns ## [1] 6 This data frame has 6 columns. Alternatively, the nrow() function counts the number of rows/observations/records. print(nrow(person_info)) # count the number of records/rows/observations ## [1] 10 This data set has 10 rows and 6 columns. 2.5.2 Brief data analysis When the function, attach() is called to a data frame, the R program can refer to specific column without associating it with the data frame name. In this section the person_info will be attached to R and dive shallow into data analysis. Calculate the mean of the salary # attach the file inorder to avoid the $ sign attach(person_info) mean(Salary) ## [1] 65200 The average salary in the data set is 65200. The names() function is called to find the column names of the data set. # find the column names names(person_info) ## [1] &quot;Name&quot; &quot;Emp.Id&quot; &quot;Gender&quot; &quot;Age&quot; &quot;Smoke&quot; &quot;Salary&quot; Now, lets jump to the protein data which is stored in the test.csv file. The head() function is used to show the first 6 records of the dataset # Load the data set proteindata &lt;- read.csv(&quot;data/test.csv&quot;) head(proteindata) ## SNO DBNAME PROTEIN_NAME NO_DIMER NO_RESIDUES DEPOSITED_DATE ## 1 1 PDB TUBULIN 3 349 05-05-2014 ## 2 2 PDB KERATIN 5 450 05-06-2015 ## 3 3 UNIPROT HEMOGLOBIN 7 345 05-07-2017 ## 4 4 PIR CYTOKINEASE 10 950 05-05-2014 ## 5 5 EXPASY PROTEASE 5 493 05-06-2015 ## 6 6 ENTREX TUBULIN1 4 760 05-07-2017 Count the number of rows and columns in the protein dataset ncol(proteindata) ## [1] 6 nrow(proteindata) ## [1] 10 The data frame has 10 rows and 6 columns. Alternatively, the dim() can be used, it returns the number of rows and columns respectively. dim(proteindata) ## [1] 10 6 Get the protein detail having the most residues and the max residues value. objname1 &lt;- max(proteindata$NO_RESIDUES) objname1 ## [1] 950 objname2 &lt;- subset(proteindata, NO_RESIDUES == max(NO_RESIDUES)) objname2 ## SNO DBNAME PROTEIN_NAME NO_DIMER NO_RESIDUES DEPOSITED_DATE ## 4 4 PIR CYTOKINEASE 10 950 05-05-2014 The max() function is used to find the maximum value in a vector or column. In this code, max(proteindata$NO_RESIDUES) returns the highest number of residues (NO_RESIDUES) found in the proteindata dataset, and this value is stored in objname1. The subset() function is used to filter rows in a data frame that meet certain conditions. Here, subset(proteindata, NO_RESIDUES == max(NO_RESIDUES)) returns all rows from the proteindata dataset where the NO_RESIDUES column matches the maximum value, and the result is stored in objname2. Get the protein detail having entry in PDB database objname3 &lt;- subset(proteindata, DBNAME == &quot;PDB&quot;) print(objname3) ## SNO DBNAME PROTEIN_NAME NO_DIMER NO_RESIDUES DEPOSITED_DATE ## 1 1 PDB TUBULIN 3 349 05-05-2014 ## 2 2 PDB KERATIN 5 450 05-06-2015 ## 7 7 PDB TUBULIN2 3 387 05-05-2014 The proteindata dataset is filtered to select rows where the DBNAME column is equal to \"PDB\". This means it extracts all proteins that are listed in the PDB database. The resulting subset is stored in objname3. Get the protein detail having more than 3 dimer from PDB database objname5 &lt;- subset(proteindata, as.Date(DEPOSITED_DATE) &gt; as.Date(&quot;2014-05-05&quot;)) print(objname5) ## [1] SNO DBNAME PROTEIN_NAME NO_DIMER NO_RESIDUES ## [6] DEPOSITED_DATE ## &lt;0 rows&gt; (or 0-length row.names) The subset function is used to filter the proteindata dataset to include only rows where DBNAME is \"PDB\" and DIMER_COUNT is greater than 3. The filtered data is stored in objname5 Now that we have the basic concept of how R works, lets introduce the Bioconductor package. 2.6 Introduction to Bioconductor This open-source project provides tools for analyzing and understanding high-throughput genomic data. It includes a broad selection of packages for both bioinformatics and chemoinformatics. Before we explore the ChemmineR package in depth, let’s start with a few basic concepts. 2.6.1 Exploring Genomic data The GenomicRanges package is used to work with genomic intervals. It installed by: BiocManager::install(&quot;GenomicRanges&quot;) Lets now import the genomic ranges package to the program library(GenomicRanges) GRanges objects represent genomic ranges, allowing you to manipulate genomic intervals and align them with genomic data like gene annotations. # Create a simple genomic range object gr &lt;- GRanges(seqnames = &quot;chr1&quot;, ranges = IRanges(start = 100, end = 200)) gr ## GRanges object with 1 range and 0 metadata columns: ## seqnames ranges strand ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; ## [1] chr1 100-200 * ## ------- ## seqinfo: 1 sequence from an unspecified genome; no seqlengths 2.6.2 Visualizing Gene Expression Data The DESeq2 package is used to find the differential gene expression analysis. It is widely used to identify genes that are differentially expressed under different conditions. Its is installed by; BiocManager::install(&quot;DESeq2&quot;) Load the library library(DESeq2) DESeq2 handles RNA-Seq data to model and estimate the expression levels of genes, providing statistical tools for identifying differentially expressed genes. # Example dataset dds &lt;- makeExampleDESeqDataSet() dds &lt;- DESeq(dds) ## estimating size factors ## estimating dispersions ## gene-wise dispersion estimates ## mean-dispersion relationship ## final dispersion estimates ## fitting model and testing res &lt;- results(dds) plotMA(res) 2.6.3 Annotating Genomic Data The AnnotationDbi and org.Hs.eg.db packages are used to annotate gene identifiers with gene names, descriptions and other relevant metadata. The packages can be installed by; BiocManager::install(&quot;org.Hs.eg.db&quot;) Load the org.Hs.eg.db library. library(org.Hs.eg.db) The packages provide a framework for mapping and retrieving biological data from databases. It’s crucial for adding biological context to your data, such as converting gene IDs to gene names # Example: Map Entrez IDs to gene symbols gene_ids &lt;- c(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;) symbols &lt;- mapIds(org.Hs.eg.db, keys = gene_ids, column = &quot;SYMBOL&quot;, keytype = &quot;ENTREZID&quot;) ## &#39;select()&#39; returned 1:1 mapping between keys and columns symbols ## 1 2 3 ## &quot;A1BG&quot; &quot;A2M&quot; &quot;A2MP1&quot; 2.6.4 Working with Sequence Data The popular `BioStrings package is used to analyze the protein, RNA and DNA sequences. The library is installed as the ones before. BiocManager::install(&quot;Biostrings&quot;) Load the library library(Biostrings) Lets manipulate the DNA String \"ATCGGCTA\" by reverse complimenting. # Create a DNAString object dna_seq &lt;- DNAString(&quot;ATCGGCTA&quot;) reverseComplement(dna_seq) ## 8-letter DNAString object ## seq: TAGCCGAT This Bioconductor is an essential toolkit for anyone working with genomic data. Its packages are designed to facilitate a wide range of bioinformatics tasks, from basic sequence manipulation to complex statistical analyses. "],["chemical-properties-prediction-and-visualized..html", "Chapter 3 Chemical Properties prediction and visualized. 3.1 Whats is ChemmineR? 3.2 Installation 3.3 Loading the package and Documentation 3.4 Create Instances of SDFset class 3.5 Retrieving atom, bond and data block 3.6 Molecular visualization in R 3.7 Resources", " Chapter 3 Chemical Properties prediction and visualized. Structural properties similarity searching Molecular visualizations 3.1 Whats is ChemmineR? ChemmineR is an R package under the BioConductor library that is designed for the analysis and visualization of chemical data, especially on molecules and compounds. Below are some of its key features; Visualization: It provide tools that visualize the chemical structures and theor relationships. This make it easier to interpret and communicate your findings. Chemical Structure Handling: ChemmineR can read, write, and manipulate chemical structures. These structures are stored in file formats like SDF and SMILES which are the industry standard ways to describe the molecular structure in text format. Clustering: ChemmineR can identify patterns and relationships between different molecules by grouping the like ones together. Structure Similarity Search: ChemmineR can compare different chemical structures and find their similarity and how useful they are for certain tasks like identifying compounds that may have similar properties or biological effects. 3.2 Installation The ChemmineR package can be installed from R with: if(!requireNamespace(&quot;BioManager&quot;, quitely=TRUE)) install.packages(&quot;BioManager&quot;) BiocManager::install(&quot;ChemminerR&quot;) 3.3 Loading the package and Documentation The below command is called to invoke the ChemmineR package to the program library(&quot;ChemmineR&quot;) # Loads the package To find the documentation and list all functions and classes call the command below library(help=&quot;ChemmineR&quot;) # Lists all the functions and classes To open a PDF manual for ChemmineR documentation from R vignette(&quot;ChemmineR&quot;) 3.4 Create Instances of SDFset class SDF(Structure-Data-File) is the standard format for representing the chemical structures. Let me briefly walk you through a practical session on how to work with SDF files before diving deep into ChemmineR package. Load the sdfsample file This is a built in dataset in ChemmineR. It is loaded by data(&quot;sdfsample&quot;) Explore the SDFset object This data type falls under the class SDFset. class(sdfsample) ## [1] &quot;SDFset&quot; ## attr(,&quot;package&quot;) ## [1] &quot;ChemmineR&quot; Calling the data set by its name provides the summary sdfsample ## An instance of &quot;SDFset&quot; with 100 molecules In this case, the sdfsample has 100 molecules. To access a specific molecule, call it by index. For instance,accessing the first molecule; view(sdfsample[1]) ## $CMP1 ## An instance of &quot;SDF&quot; ## ## &lt;&lt;header&gt;&gt; ## Molecule_Name ## &quot;650001&quot; ## Source ## &quot; -OEChem-07071010512D&quot; ## Comment ## &quot;&quot; ## Counts_Line ## &quot; 61 64 0 0 0 0 0 0 0999 V2000&quot; ## ## &lt;&lt;atomblock&gt;&gt; ## C1 C2 C3 C5 C6 C7 C8 C9 C10 C11 C12 C13 C14 C15 C16 ## O_1 7.0468 0.0839 0 0 0 0 0 0 0 0 0 0 0 0 0 ## O_2 12.2708 1.0492 0 0 0 0 0 0 0 0 0 0 0 0 0 ## ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ## H_60 1.8411 -1.5985 0 0 0 0 0 0 0 0 0 0 0 0 0 ## H_61 2.6597 -1.2843 0 0 0 0 0 0 0 0 0 0 0 0 0 ## ## &lt;&lt;bondblock&gt;&gt; ## C1 C2 C3 C4 C5 C6 C7 ## 1 1 16 2 0 0 0 0 ## 2 2 23 1 0 0 0 0 ## ... ... ... ... ... ... ... ... ## 63 33 60 1 0 0 0 0 ## 64 33 61 1 0 0 0 0 ## ## &lt;&lt;datablock&gt;&gt; (33 data items) ## PUBCHEM_COMPOUND_CID PUBCHEM_COMPOUND_CANONICALIZED ## &quot;650001&quot; &quot;1&quot; ## PUBCHEM_CACTVS_COMPLEXITY PUBCHEM_CACTVS_HBOND_ACCEPTOR ## &quot;700&quot; &quot;7&quot; ## ## &quot;...&quot; -Get the names of the molecules To find column names of the sdf data set call the sdfid command. sdfid(sdfsample) ## [1] &quot;650001&quot; &quot;650002&quot; &quot;650003&quot; &quot;650004&quot; &quot;650005&quot; &quot;650006&quot; &quot;650007&quot; &quot;650008&quot; ## [9] &quot;650009&quot; &quot;650010&quot; &quot;650011&quot; &quot;650012&quot; &quot;650013&quot; &quot;650014&quot; &quot;650015&quot; &quot;650016&quot; ## [17] &quot;650017&quot; &quot;650019&quot; &quot;650020&quot; &quot;650021&quot; &quot;650022&quot; &quot;650023&quot; &quot;650024&quot; &quot;650025&quot; ## [25] &quot;650026&quot; &quot;650027&quot; &quot;650028&quot; &quot;650029&quot; &quot;650030&quot; &quot;650031&quot; &quot;650032&quot; &quot;650033&quot; ## [33] &quot;650034&quot; &quot;650035&quot; &quot;650036&quot; &quot;650037&quot; &quot;650038&quot; &quot;650039&quot; &quot;650040&quot; &quot;650041&quot; ## [41] &quot;650042&quot; &quot;650043&quot; &quot;650044&quot; &quot;650045&quot; &quot;650046&quot; &quot;650047&quot; &quot;650048&quot; &quot;650049&quot; ## [49] &quot;650050&quot; &quot;650052&quot; &quot;650054&quot; &quot;650056&quot; &quot;650058&quot; &quot;650059&quot; &quot;650060&quot; &quot;650061&quot; ## [57] &quot;650062&quot; &quot;650063&quot; &quot;650064&quot; &quot;650065&quot; &quot;650066&quot; &quot;650067&quot; &quot;650068&quot; &quot;650069&quot; ## [65] &quot;650070&quot; &quot;650071&quot; &quot;650072&quot; &quot;650073&quot; &quot;650074&quot; &quot;650075&quot; &quot;650076&quot; &quot;650077&quot; ## [73] &quot;650078&quot; &quot;650079&quot; &quot;650080&quot; &quot;650081&quot; &quot;650082&quot; &quot;650083&quot; &quot;650085&quot; &quot;650086&quot; ## [81] &quot;650087&quot; &quot;650088&quot; &quot;650089&quot; &quot;650090&quot; &quot;650091&quot; &quot;650092&quot; &quot;650093&quot; &quot;650094&quot; ## [89] &quot;650095&quot; &quot;650096&quot; &quot;650097&quot; &quot;650098&quot; &quot;650099&quot; &quot;650100&quot; &quot;650101&quot; &quot;650102&quot; ## [97] &quot;650103&quot; &quot;650104&quot; &quot;650105&quot; &quot;650106&quot; The SDF dataset can alsio be converted to SMILES (Simplified Molecular Input Line Entry System) format. However, you need to install the ChemmineOB before converting SMILE format BiocManager::install(&quot;ChemmineOB&quot;) the convert the file smiles &lt;- sdf2smiles(sdfsample) head(smiles) ## An instance of &quot;SMIset&quot; with 1 molecules Save and export the SDF data The SDF file can be exported to a file locally. write.SDF(sdfsample, file=&quot;data/sdfsample_export.sdf&quot;) 3.5 Retrieving atom, bond and data block Atom block The atom block provides information about each atom in a molecule, including its coordinates in 3D space and the element symbol. It can be retrieved using ChemmineR by invoking the function atomblock. In this case, we are retrieving the atom block information of the first four molecules. atomblock(sdfset[1:4]) Bond block The bond block provide the details of the connection between/among atoms and the type of bond. The bond block information can be retrieved by the function bondblock. In this case we are retrieving the bonblock information of the first four molecules bondblock(sdfset[1:4]) Data Block This function contains the additional information or the metadata found on the SDF file. This metadata is the information connected to the molecular properties for instance the molecular weight and logP. datablock(sdfset[1:4]) ## $`650001` ## MF MW C H N O ## &quot;C23H28N4O6&quot; &quot;456.4916&quot; &quot;23&quot; &quot;28&quot; &quot;4&quot; &quot;6&quot; ## S F Cl ## &quot;0&quot; &quot;0&quot; &quot;0&quot; ## ## $`650002` ## MF MW C H N O ## &quot;C18H23N5O3&quot; &quot;357.4069&quot; &quot;18&quot; &quot;23&quot; &quot;5&quot; &quot;3&quot; ## S F Cl ## &quot;0&quot; &quot;0&quot; &quot;0&quot; ## ## $`650003` ## MF MW C H N ## &quot;C18H18N4O3S&quot; &quot;370.4255&quot; &quot;18&quot; &quot;18&quot; &quot;4&quot; ## O S F Cl ## &quot;3&quot; &quot;1&quot; &quot;0&quot; &quot;0&quot; ## ## $`650004` ## MF MW C H N ## &quot;C21H27N5O5S&quot; &quot;461.5346&quot; &quot;21&quot; &quot;27&quot; &quot;5&quot; ## O S F Cl ## &quot;5&quot; &quot;1&quot; &quot;0&quot; &quot;0&quot; 3.5.1 Assigning compound IDS and keeping them unique Return IDs from SDFset object. They are the compound IDS stored in the data block of each molecule within the SDFset that are used to unique identify each molecule. In this case we will subset and return the first four molecules. cid(sdfset)[1:4] ## [1] &quot;650001&quot; &quot;650002&quot; &quot;650003&quot; &quot;650004&quot; Returns IDs from SD file header. The data set might have been combined from other different smaller data sets therefore, the makeUnique() function is used a unique ID to each molecule. It does by appending the suffixes “_1”, “_2” to the compound IDS. This is also used to handle the duplicates. unique_ids &lt;- makeUnique(sdfid(sdfset)) ## [1] &quot;No duplicates detected!&quot; cid(sdfset) &lt;- unique_ids 3.5.2 Converting the data blocks in an SDFset to a matrix These data blocks can also be converted to a matrix by blockmatrix &lt;- datablock2ma(datablocklist = datablock(sdfset)) The matrix can also be split into numeric and character matrix by splitNumChar() function numchar &lt;- splitNumChar(blockmatrix = blockmatrix) Slice the numeric matrix numchar[[1]][1:2,1:2] ## MW C ## 650001 456.4916 23 ## 650002 357.4069 18 Slice the character matrix numchar[[2]][1:2, 10:11] 3.5.3 Compute atom frequency matrix, molecular weight and formula propma &lt;- data.frame(MF=MF(sdfset), MW=MW(sdfset), atomcountMA(sdfset)) propma[1:4,] ## MF MW C H N O S F Cl ## 650001 C23H28N4O6 456.4916 23 28 4 6 0 0 0 ## 650002 C18H23N5O3 357.4069 18 23 5 3 0 0 0 ## 650003 C18H18N4O3S 370.4255 18 18 4 3 1 0 0 ## 650004 C21H27N5O5S 461.5346 21 27 5 5 1 0 0 Assign matrix data to data block datablock(sdfset) &lt;- propma datablock(sdfset[1]) # call the first compound in the databases ## $`650001` ## MF MW C H N O ## &quot;C23H28N4O6&quot; &quot;456.4916&quot; &quot;23&quot; &quot;28&quot; &quot;4&quot; &quot;6&quot; ## S F Cl ## &quot;0&quot; &quot;0&quot; &quot;0&quot; 3.5.4 String searching in SDFset Returns the summary view of the matches grepSDFset(&quot;650001&quot;, sdfset, field=&quot;datablock&quot;, mode=&quot;subset&quot;) ## $`650001` ## An instance of &quot;SDF&quot; ## ## &lt;&lt;header&gt;&gt; ## Molecule_Name ## &quot;650001&quot; ## Source ## &quot; -OEChem-07071010512D&quot; ## Comment ## &quot;&quot; ## Counts_Line ## &quot; 61 64 0 0 0 0 0 0 0999 V2000&quot; ## ## &lt;&lt;atomblock&gt;&gt; ## C1 C2 C3 C5 C6 C7 C8 C9 C10 C11 C12 C13 C14 C15 C16 ## O_1 7.0468 0.0839 0 0 0 0 0 0 0 0 0 0 0 0 0 ## O_2 12.2708 1.0492 0 0 0 0 0 0 0 0 0 0 0 0 0 ## ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ## H_60 1.8411 -1.5985 0 0 0 0 0 0 0 0 0 0 0 0 0 ## H_61 2.6597 -1.2843 0 0 0 0 0 0 0 0 0 0 0 0 0 ## ## &lt;&lt;bondblock&gt;&gt; ## C1 C2 C3 C4 C5 C6 C7 ## 1 1 16 2 0 0 0 0 ## 2 2 23 1 0 0 0 0 ## ... ... ... ... ... ... ... ... ## 63 33 60 1 0 0 0 0 ## 64 33 61 1 0 0 0 0 ## ## &lt;&lt;datablock&gt;&gt; (9 data items) ## MF MW C H ## &quot;C23H28N4O6&quot; &quot;456.4916&quot; &quot;23&quot; &quot;28&quot; &quot;...&quot; Search by index grepSDFset(&quot;650001&quot;, sdfset, field=&quot;datablock&quot;, mode=&quot;index&quot;) ## 1 1 1 1 1 1 1 1 1 ## 1 2 3 4 5 6 7 8 9 3.6 Molecular visualization in R Export SDFset to SD file write.SDF(sdfset[1:4], file=&quot;data/sub.sdf&quot;, sig=TRUE) Plot molecule structure of one or many SDFs plot(sdfset[1:4], print=FALSE) # plots structures to R graphics device Compound viewing in web browser sdf.visualize(sdfset[1:4]) You save the image of the visualization save.image(&quot;nstc.Rdata&quot;) 3.6.1 Molecular Property Functions Different types of atoms vary in their frequency across all molecules in an SDFset. The atomCountMA() is used to compute their frequency. propma &lt;- atomcountMA(sdfset, addH=FALSE) boxplot(propma, col=&quot;blue&quot;, main=&quot;Atom Frequency&quot;) In the above SDFset, Carbon and Hydrogen atoms are the most frequent while Flourine and Chlorine atoms are the least frequent in this sample SDFset. These data is stored in the variable atomprop. 3.6.2 Similarity Comparisons and Searching 3.6.2.1 Maximum Common Substructure(MCS) Searching ChemmineR provides a functionality/algorithm that can be used to perform a pairwise compound comparison, clustering and similarity searching. This package is just but an add-on package to ChemmineR referred to as fmcsR and can be installed by BiocManager::install(&quot;fmcsR&quot;) To load the library to the console run library(fmcsR) We will use a different SDSFset provided by the fmcsR package and compare between caffeine and viagra data(fmcstest) # Loads test sdfset object test &lt;- fmcs(fmcstest[1], fmcstest[2], au=2, bu=1) # Searches for MCS with mismatches plotMCS(test) # Plots both query compounds with MCS in color 3.7 Resources The complete documentation (with code) of the ChemmineR package can be found below here - https://www.bioconductor.org/packages/release/bioc/vignettes/ChemmineR/inst/doc/ChemmineR.html - https://www.bioconductor.org/packages/devel/bioc/vignettes/fmcsR/inst/doc/fmcsR.html "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
